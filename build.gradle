plugins {
	id 'java'
	id 'war'
	id 'application'
	id 'checkstyle'
	id 'jacoco'
	id 'com.adarshr.test-logger' version '3.2.0'
	id 'com.github.ben-manes.versions' version '0.42.0'
	id 'org.springframework.boot' version '3.2.0-SNAPSHOT'
	id 'io.spring.dependency-management' version '1.1.3'
	id 'org.liquibase.gradle' version '2.2.0'
	id 'org.siouan.frontend-jdk11' version '6.0.0' // Сборщик фронтенда
}

group = 'hexlet.code'
version = '1.0-SNAPSHOT'

repositories {
	mavenCentral()
	maven { url 'https://repo.spring.io/milestone' }
	maven { url 'https://repo.spring.io/snapshot' }
}

dependencies {
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	implementation(
			'org.springframework.boot:spring-boot-starter-data-jpa',
			'org.springframework.boot:spring-boot-starter-web',
			'org.springframework.boot:spring-boot-starter-actuator',
			'org.springframework.boot:spring-boot-starter-validation',
			'org.springframework.boot:spring-boot-starter-security',
			'io.jsonwebtoken:jjwt:0.9.1',
			// Зависимость для swagger
			// Позволяет сгенерировать и просматривать интерактивную документацию по API
			'org.springdoc:springdoc-openapi-ui:1.7.0',
			'org.liquibase:liquibase-core',
			'com.querydsl:querydsl-jpa:5.0.0:jakarta',
			'com.rollbar:rollbar-spring-boot-webmvc:1.10.0'
	)
	providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
	testImplementation(
			'org.springframework.boot:spring-boot-starter-test',
			'com.github.database-rider:rider-junit5:1.36.0',
			'org.springframework.boot:spring-boot-starter-security',
			'org.springframework.security:spring-security-test',
			'org.assertj:assertj-core:3.11.1'
	)
	runtimeOnly (
			'com.h2database:h2',
			'org.postgresql:postgresql:42.6.0'
	)
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor(
			'org.projectlombok:lombok',
			'com.querydsl:querydsl-apt:5.0.0:jakarta',
			'jakarta.persistence:jakarta.persistence-api:3.1.0'
	)
	liquibaseRuntime(
			sourceSets.main.output,
			'org.liquibase:liquibase-core',
			'info.picocli:picocli:4.7.1',
			'org.liquibase.ext:liquibase-hibernate6:4.21.1',
			'org.springframework.boot:spring-boot-starter-data-jpa',
			'com.h2database:h2'
	)
}

tasks.named('test') {
	useJUnitPlatform()
}

test {
	finalizedBy jacocoTestReport
}

testlogger {
	showStandardStreams true
}

jacocoTestReport {
	reports {
		xml.required = true
	}
}

application {
	mainClass.set("hexlet.code.AppApplication")
}

wrapper {
	gradleVersion = '8.2.1'
	distributionType = Wrapper.DistributionType.ALL
}

compileJava {
	options.release = 20
	options.encoding = 'UTF-8'
}

checkstyle {
	toolVersion '10.12.1'
}

// Настраиваем diffChangeLog таким образом, чтобы миграции учитывали изменения в моделях
diffChangelog {
	dependsOn compileJava
}

task stage(dependsOn: ['clean', 'installDist'])
installDist.mustRunAfter clean

// Настраиваем Liquibase
liquibase {
	activities {
		main {
			// Указываем путь, по которому будет сгенерирован файл миграции
			changelogFile 'src/main/resources/db/changelog/db.changelog-master.yaml'
			// Указываем источник, с которым будут сравниваться изменения
			// Это база данных, изначально она пустая
			url 'jdbc:h2:file:./taskManagerDB'
			// Имя пользователя и пароль для подключения к базе
			// Сравниваем с моделями, задавая пакет
			referenceUrl 'hibernate:spring:hexlet.code.model.' +
					// Указываем диалект
					'?dialect=org.hibernate.dialect.H2Dialect' +
					// Указываем правила именования таблиц и столбцов,
					// чтобы они соответствовали правилам Spring
					'&hibernate.physical_naming_strategy=org.hibernate.boot.model.naming.CamelCaseToUnderscoresNamingStrategy'
		}
	}
}

// Сборка фронтенда.
// Выполняется только если ничего не изменилось.
// *****************************************************************************
frontend {
	nodeVersion = '16.13.1'
	installScript = 'install'
	assembleScript = 'run build'
	packageJsonDirectory = file("${projectDir}/frontend")
}

def configFrontendTasks = {
	inputs.files(fileTree("$projectDir/frontend").exclude('build', 'node_modules'))
	outputs.dir("$buildDir/resources/main/static")
}

assembleFrontend {
	configure configFrontendTasks

	doLast {
		copy {
			from "$projectDir/frontend/build"
			into "$buildDir/resources/main/static"
		}
	}
}

installFrontend {
	configure configFrontendTasks
}

processResources.dependsOn assembleFrontend
// *****************************************************************************

checkstyleMain.source = "src/main/java"

checkstyleMain.exclude (
		'**/hexlet/code/AppApplication**',
		'**/hexlet/code/ServletInitializer**'
)
